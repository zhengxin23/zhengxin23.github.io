<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑廿三</title>
  
  <subtitle>爱程序 | 爱读书 | 爱运动 | 爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhengxin23.github.io/"/>
  <updated>2019-04-06T02:29:19.988Z</updated>
  <id>https://zhengxin23.github.io/</id>
  
  <author>
    <name>zheng xin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.Net性能测试工具BenchmarkDotnet</title>
    <link href="https://zhengxin23.github.io/2019/04/06/20190406-benchmarkDotnet/"/>
    <id>https://zhengxin23.github.io/2019/04/06/20190406-benchmarkDotnet/</id>
    <published>2019-04-06T01:46:26.000Z</published>
    <updated>2019-04-06T02:29:19.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>性能基准测试可以帮助程序员对比2个代码段或者方法的性能，这对于代码重写或者重构来说，可以提供一种很好的量化标准。如果没有性能基准测试，很难想象将方法A改为B方法时候，仅凭肉眼如何区分性能的变化。</p></blockquote><h3 id="BenchmarkDotNet"><a href="#BenchmarkDotNet" class="headerlink" title="BenchmarkDotNet"></a>BenchmarkDotNet</h3><p>BenchmarkDotNet是一款强力的.Net性能基准测试库，官网 <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">https://benchmarkdotnet.org/</a>。<br>运行时支持<br><a id="more"></a></p><ul><li>NET Framework (4.6+),</li><li>.NET Core (2.0+)</li><li>Mono</li><li>CoreRT。</li></ul><p>BenchmarkDotnet为每个被测试的方法提供了孤立的环境, 使用BenchmarkDotnet, 程序员可以很容易的编写各种性能测试方法，并可以避免许多常见的坑。</p><h3 id="代码基准测试-Code-Benchmarking"><a href="#代码基准测试-Code-Benchmarking" class="headerlink" title="代码基准测试(Code Benchmarking)"></a>代码基准测试(Code Benchmarking)</h3><p>现在我们希望来对比一下Linq to object中First和Single方法的性能</p><blockquote><p>虽然我们知道First的性能肯定比Single高, First方法会在查询到第一个满足条件的对象之后就停止集合遍历，而Single找到第一个满足条件的对象之后，不会停止查找，它会去继续查找集合中的剩余对象，直到遍历整个集合或者在集合中找到第二个匹配条件的对象。 这里我们只是为了演示一下如何进行代码基准测试。</p></blockquote><p>为了使用BenchmarkDotNet来进行代码基准测试，我们首先创建一个空的.Net Core控制台程序。</p><p><img src="https://upload-images.jianshu.io/upload_images/14183497-2b402ba1a47593e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/955/format/webp" alt></p><p>然后我们使用Package Manage Console添加BenchmarkDotNet库</p><p><code>PM&gt; Install-Package BenchmarkDotNet</code></p><p>然后我们修改Program.cs文件, 代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Program</span><br><span class="line">&#123;</span><br><span class="line">    public class SingleVsFirst</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly List&lt;string&gt; _haystack = new List&lt;string&gt;();</span><br><span class="line">        private readonly int _haystackSize = 1000000;</span><br><span class="line">        private readonly string _needle = &quot;needle&quot;;</span><br><span class="line"></span><br><span class="line">        public SingleVsFirst()</span><br><span class="line">        &#123;</span><br><span class="line">            //Add a large amount of items to our list. </span><br><span class="line">            Enumerable.Range(1, _haystackSize).ToList().ForEach(x =&gt; _haystack.Add(x.ToString()));</span><br><span class="line">            //Insert the needle right in the middle. </span><br><span class="line">            _haystack.Insert(_haystackSize / 2, _needle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [Benchmark]</span><br><span class="line">        public string Single() =&gt; _haystack.SingleOrDefault(x =&gt; x == _needle);</span><br><span class="line"></span><br><span class="line">        [Benchmark]</span><br><span class="line">        public string First() =&gt; _haystack.FirstOrDefault(x =&gt; x == _needle);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var summary = BenchmarkRunner.Run&lt;SingleVsFirst&gt;();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 代码解释说明 </strong></p><ul><li>以上代码中<code>SingleVsFtirs</code>类是一个测试类。</li><li>测试类中我们生成了一个拥有100万对象的字符串集合。</li><li>我们在集合的中间位置插入了一个测试字符串，字符串的内容是”needle”。</li><li>代码中的<code>Single</code>和<code>First</code>方法，分别调用了Linq to - object的<code>SingleOrDefault</code>和<code>FirstOrDefault</code>方法- 来查询字符串集合中的”needle”字符串。</li><li>在<code>Single</code>和<code>First</code>方法上，我们加入<code>[Benchmark]</code>特性, 拥有该特性的方法会出现在最后的基准检测报告中。</li></ul><blockquote><p>注意：</p><ul><li>测试的方法必须是公开的(public), 如果把public去掉，程序不会产生任何结果</li><li>在运行程序之前，还有一步关键的操作，测试的程序需要使用Release模式编译，并且不能附加任何调试器(Debugger)</li></ul></blockquote><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>现在我们运行程序，程序产生的最终报告如下</p><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Median</th></tr></thead><tbody><tr><td>Single</td><td style="text-align:right">28.12 ms</td><td style="text-align:right">0.9347 ms</td><td style="text-align:right">2.697 ms</td><td style="text-align:right">28.93 ms</td></tr><tr><td>First</td><td style="text-align:right">13.30 ms</td><td style="text-align:right">0.8394 ms</td><td style="text-align:right">2.475 ms</td><td style="text-align:right">14.48 ms</td></tr></tbody></table><h3 id="带测试参数的基准测试-Input-Benchmarking"><a href="#带测试参数的基准测试-Input-Benchmarking" class="headerlink" title="带测试参数的基准测试(Input Benchmarking)"></a>带测试参数的基准测试(Input Benchmarking)</h3><p>BenchmarkDotNet中我们还可以使用<code>[ParamsSource]</code>参数来指定测试的用例范围。<br>在上面的代码中，我们测试了匹配字符串在集合中间位置时，<code>First</code>和<code>Single</code>的效率对比，下面我们修改上面的代码，我们希望分别测试匹配字符串在集合头部，尾部以及中间位置时<code>First</code>和<code>Single</code>的效率对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line"> </span><br><span class="line">using BenchmarkDotNet.Attributes;</span><br><span class="line">using BenchmarkDotNet.Running;</span><br><span class="line"> </span><br><span class="line">namespace BenchmarkExample</span><br><span class="line">&#123;</span><br><span class="line">    public class SingleVsFirst</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly List&lt;string&gt; _haystack = new List&lt;string&gt;();</span><br><span class="line">        private readonly int _haystackSize = 1000000;</span><br><span class="line"> </span><br><span class="line">        public List&lt;string&gt; _needles =&gt; new List&lt;string&gt; &#123; &quot;StartNeedle&quot;, &quot;MiddleNeedle&quot;, &quot;EndNeedle&quot; &#125;;</span><br><span class="line"> </span><br><span class="line">        public SingleVsFirst()</span><br><span class="line">        &#123;</span><br><span class="line">            //Add a large amount of items to our list. </span><br><span class="line">            Enumerable.Range(1, _haystackSize).ToList().ForEach(x =&gt; _haystack.Add(x.ToString()));</span><br><span class="line"> </span><br><span class="line">            //One at the start. </span><br><span class="line">            _haystack.Insert(0, _needles[0]);</span><br><span class="line">            //One right in the middle. </span><br><span class="line">            _haystack.Insert(_haystackSize / 2, _needles[1]);</span><br><span class="line">            //One at the end. </span><br><span class="line">            _haystack.Insert(_haystack.Count - 1, _needles[2]);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        [ParamsSource(nameof(_needles))]</span><br><span class="line">        public string Needle &#123; get; set; &#125;</span><br><span class="line"> </span><br><span class="line">        [Benchmark]</span><br><span class="line">        public string Single() =&gt; _haystack.SingleOrDefault(x =&gt; x == Needle);</span><br><span class="line"> </span><br><span class="line">        [Benchmark]</span><br><span class="line">        public string First() =&gt; _haystack.FirstOrDefault(x =&gt; x == Needle);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var summary = BenchmarkRunner.Run&lt;SingleVsFirst&gt;();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 代码解释说明 </strong></p><ul><li>我们创建了测试的用例字符串集合<code>_needles</code></li><li>在构造函数中，我们在字符串集合的头部，中部，尾部分别插入了3个字符串</li><li>我们添加了一个属性<code>Needle</code>, 表示当前测试的用例，在被测试<code>Single</code>和<code>First</code>方法中，我们使用属性<code>Needle</code>来匹配</li><li>在属性Needle上我们加上了参数来源特性<code>[ParamsSource]</code>, 并设置参数来源是<code>_needles</code></li></ul><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>现在我们运行程序，程序产生的最终报告如下</p><table><thead><tr><th>Method</th><th>Needle</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Median</th></tr></thead><tbody><tr><td>Single</td><td>EndNeedle</td><td style="text-align:right">23,266,757.53 ns</td><td style="text-align:right">432,206.593 ns</td><td style="text-align:right">591,609.263 ns</td><td style="text-align:right">23,236,343.07 ns</td></tr><tr><td>First</td><td>EndNeedle</td><td style="text-align:right">24,984,621.12 ns</td><td style="text-align:right">494,223.345 ns</td><td style="text-align:right">783,890.599 ns</td><td style="text-align:right">24,936,945.21 ns</td></tr><tr><td>Single</td><td>MiddleNeedle</td><td style="text-align:right">21,379,814.14 ns</td><td style="text-align:right">806,253.579 ns</td><td style="text-align:right">2,377,256.870 ns</td><td style="text-align:right">22,436,101.14 ns</td></tr><tr><td>First</td><td>MiddleNeedle</td><td style="text-align:right">11,984,519.09 ns</td><td style="text-align:right">315,184.021 ns</td><td style="text-align:right">924,380.173 ns</td><td style="text-align:right">12,233,700.94 ns</td></tr><tr><td>Single</td><td>StartNeedle</td><td style="text-align:right">23,650,243.23 ns</td><td style="text-align:right">599,968.173 ns</td><td style="text-align:right">714,219.431 ns</td><td style="text-align:right">23,555,402.19 ns</td></tr><tr><td>First</td><td>StartNeedle</td><td style="text-align:right">89.17 ns</td><td style="text-align:right">1.864 ns</td><td style="text-align:right">2.732 ns</td><td style="text-align:right">89.07 ns</td></tr></tbody></table><p>从结果上看</p><ul><li>当匹配字符串在集合头部的时候，<code>First</code>性能比<code>Single</code>高的多</li><li>当匹配字符串在集合中部的时候，<code>First</code>性能是比<code>Single</code>的一倍</li><li>当匹配字符串在集合尾部的时候，<code>First</code>和比<code>Single</code>的性能差不多</li></ul><h3 id="加入内存测试"><a href="#加入内存测试" class="headerlink" title="加入内存测试"></a>加入内存测试</h3><p>在.NET Core中的CSV解析库中，我们使用了以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[MemoryDiagnoser]</span><br><span class="line">    public class CsvBenchmarking</span><br><span class="line">    &#123;</span><br><span class="line">        [Benchmark(Baseline =true)]</span><br><span class="line">        public IEnumerable&lt;Automobile&gt; CSVHelper()</span><br><span class="line">        &#123;</span><br><span class="line">            TextReader reader = new StreamReader(&quot;import.txt&quot;);</span><br><span class="line">            var csvReader = new CsvReader(reader);</span><br><span class="line">            var records = csvReader.GetRecords&lt;Automobile&gt;();</span><br><span class="line">            return records.ToList();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        [Benchmark]</span><br><span class="line">        public IEnumerable&lt;Automobile&gt; TinyCsvParser()</span><br><span class="line">        &#123;</span><br><span class="line">            CsvParserOptions csvParserOptions = new CsvParserOptions(true, &apos;,&apos;);</span><br><span class="line">            var csvParser = new CsvParser&lt;Automobile&gt;(csvParserOptions, new CsvAutomobileMapping());</span><br><span class="line">     </span><br><span class="line">            var records = csvParser.ReadFromFile(&quot;import.txt&quot;, Encoding.UTF8);</span><br><span class="line">     </span><br><span class="line">            return records.Select(x =&gt; x.Result).ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中除了<code>[Benchmark]</code>特性，我们还在测试类<code>CsvBenchmarking</code>上添加了<code>[MemoryDiagnoser]</code>特性，该特性会在测试报告中追加，2个方法执行时的内存使用情况。</p><table><thead><tr><th>Method</th><th style="text-align:right">Mean</th><th style="text-align:right">Scaled</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td>CSVHelper</td><td style="text-align:right">1,404.5 ms</td><td style="text-align:right">1.00</td><td style="text-align:right">244.39 MB</td></tr><tr><td>TinyCsvParser</td><td style="text-align:right">381.6 ms</td><td style="text-align:right">0.27</td><td style="text-align:right">32.53 MB</td></tr></tbody></table><p> 其中Allocated表明了内存占用情况。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> BenchmarkDotNet绝对是.NET开发人员了解代码性能，以及对比代码性能的必备神器。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;性能基准测试可以帮助程序员对比2个代码段或者方法的性能，这对于代码重写或者重构来说，可以提供一种很好的量化标准。如果没有性能基准测试，很难想象将方法A改为B方法时候，仅凭肉眼如何区分性能的变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;BenchmarkDotNet&quot;&gt;&lt;a href=&quot;#BenchmarkDotNet&quot; class=&quot;headerlink&quot; title=&quot;BenchmarkDotNet&quot;&gt;&lt;/a&gt;BenchmarkDotNet&lt;/h3&gt;&lt;p&gt;BenchmarkDotNet是一款强力的.Net性能基准测试库，官网 &lt;a href=&quot;https://benchmarkdotnet.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://benchmarkdotnet.org/&lt;/a&gt;。&lt;br&gt;运行时支持&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《微信小程序运营实战》的阅读感想</title>
    <link href="https://zhengxin23.github.io/2019/04/02/20190402-read-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98/"/>
    <id>https://zhengxin23.github.io/2019/04/02/20190402-read-微信小程序运营实战/</id>
    <published>2019-04-02T11:54:24.000Z</published>
    <updated>2019-04-02T12:11:23.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>page 136</p><blockquote><p>例如，张小龙介绍小程序时提到的汽车站购票场景中，用户扫描小程序二维码的概率远高于线上。这其实相当于购票小程序分享了汽车客运站所独占的用户时间，从而使用户更愿意关注和使用此种场景下的小程序。</p></blockquote></blockquote><p>抢占用户线下的时间片段，同时满足将商业致于无形的理念。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;page 136&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，张小龙介绍小程序时提到的汽车站购票场景中，用户扫描小程序二维码的概率远高于线上。这其实相当于购票小程序分享了汽车客运站所独占的用户时间，从而使用户更愿意关注和使用此种场景下的小程序。&lt;
      
    
    </summary>
    
    
      <category term="读书" scheme="https://zhengxin23.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>将已有项目绑定到git上</title>
    <link href="https://zhengxin23.github.io/2019/04/01/2019040101-git-create-repository/"/>
    <id>https://zhengxin23.github.io/2019/04/01/2019040101-git-create-repository/</id>
    <published>2019-04-01T13:54:00.000Z</published>
    <updated>2019-04-02T07:47:42.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1. 创建远程仓库"></a><strong>1. 创建远程仓库</strong></h3><ul><li>登录github，在上边创建一个仓库</li><li>复制仓库链接，比如为<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:alex-my/some-project.git </li></ul><a id="more"></a><h3 id="2-初始化本地仓库"><a href="#2-初始化本地仓库" class="headerlink" title="2.初始化本地仓库"></a><strong>2.初始化本地仓库</strong></h3><p>进入本地项目执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 初始化本地仓库</span><br><span class="line">git init</span><br><span class="line">// 添加全部文件</span><br><span class="line">git add .</span><br><span class="line">// 提交到本地仓库</span><br><span class="line">git commit -m “提交说明”</span><br></pre></td></tr></table></figure></p><h3 id="3-本地仓库与远程仓库绑定"><a href="#3-本地仓库与远程仓库绑定" class="headerlink" title="3.本地仓库与远程仓库绑定"></a><strong>3.本地仓库与远程仓库绑定</strong></h3><p>绑定到远程仓库，并提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 绑定，并取一个别名，通常用origin，后面的地址是前边创建的远程仓库地址</span><br><span class="line">git remote add origin git@github.com:alex-my/some-project.git</span><br><span class="line">// 把本地仓库地址提交到远程仓库</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><h3 id="4-修改本地仓库，并提交到远程仓库"><a href="#4-修改本地仓库，并提交到远程仓库" class="headerlink" title="4.修改本地仓库，并提交到远程仓库"></a><strong>4.修改本地仓库，并提交到远程仓库</strong></h3><p>假设修改了README.md文件<br>在根目录或者在文件所在目录执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">// 查看变动</span><br><span class="line">git status</span><br><span class="line">// 提交到本地仓库</span><br><span class="line">git commit -m “modify reade.md”</span><br><span class="line">// 如果是多人合作的项目,请先pull</span><br><span class="line">git pull</span><br><span class="line">// 推送到远程仓库(第一个使用默认,作用和第一个一样)</span><br><span class="line">git push</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><h3 id="5-仓库别名"><a href="#5-仓库别名" class="headerlink" title="5.仓库别名"></a><strong>5.仓库别名</strong></h3><p>如果有多个仓库或者多个分支，在推送或者拉取的时候需要注意<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull 仓库别名 仓库分支</span><br><span class="line">git push 仓库别名 仓库分支</span><br></pre></td></tr></table></figure></p><h3 id="遇到问题-如下图"><a href="#遇到问题-如下图" class="headerlink" title="遇到问题,如下图"></a><strong>遇到问题,如下图</strong></h3><p><img src="https://i.loli.net/2019/04/01/5ca21a42539ac.png" alt><br>解决方法：git push -f origin master</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-创建远程仓库&quot;&gt;&lt;a href=&quot;#1-创建远程仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 创建远程仓库&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 创建远程仓库&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;登录github，在上边创建一个仓库&lt;/li&gt;
&lt;li&gt;复制仓库链接，比如为&lt;a href=&quot;mailto:git@github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git@github.com&lt;/a&gt;:alex-my/some-project.git &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://zhengxin23.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhengxin23.github.io/2019/03/29/hello-world/"/>
    <id>https://zhengxin23.github.io/2019/03/29/hello-world/</id>
    <published>2019-03-29T07:27:34.417Z</published>
    <updated>2019-04-02T07:46:31.419Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
